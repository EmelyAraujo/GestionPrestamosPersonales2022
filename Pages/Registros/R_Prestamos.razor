@page "/prestamo"
@page "/prestamos/{PrestamoId:int}"

@inject PrestamosBLL PrestamosBLL
@inject PersonasBLL PersonasBLL
@inject NotificationService notificationService



<EditForm Model="prestamo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Registro de Prestamos</h3>
        </div>
        <div class="card-body">
            <div class="container overflow-hidden">
                <div class="row gy-6">
                    @*PrestamoId*@
                    <label>Prestamo ID</label>
                    <div class="form-r ow align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <div class="input-group">
                                    <InputNumber @bind-Value="prestamo.PrestamoId" class="form-control" />
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary input-group-text"
                                            @onclick="Buscar">Buscar</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-6">
                        @*Fecha*@
                        <label> Fecha de inicio</label>
                        <div class="form-group">
                            <InputDate @bind-Value="prestamo.Fecha" class="form-control" />
                            <ValidationMessage For="@(() => prestamo.Fecha)" />
                        </div>
                    </div>
                    <div class="col-6">
                        @*Fecha Vence*@
                        <label>Fecha de vencimiento</label>
                        <div class="form-group">
                            <InputDate @bind-Value="prestamo.Vence" class="form-control" />
                            <ValidationMessage For="@(() => prestamo.Vence)" />
                        </div>
                    </div>
                    <div class="col-6">
                        @*PersonaId*@
                        <div class="form-group">
                            <div class="col-6">
                                <label>Persona ID</label>
                                <InputSelect class="form-select" @bind-Value="prestamo.PersonaId">
                                    <option value="0" disabled> Seleccione uno </option>
                                    @foreach (var prestamo in listaPersonasId)
                                    {
                                        <option value="@prestamo.PersonaId"> @prestamo.PersonaId</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => prestamo.PersonaId)" class="form-control" />
                            </div>
                        </div>
                    </div>
                    <div class="col-6">
                        @*Concepto*@
                        <div class="form-group">
                            <label>Concepto</label>
                            <InputText @bind-Value="prestamo.Concepto" class="form-control" />
                            <ValidationMessage For="@(() => prestamo.Concepto)" />
                        </div>
                    </div>
                    <div class="col-6">
                        @*Monto*@
                        <div class="form-group">
                            <label>Monto</label>
                            <InputNumber @bind-Value="prestamo.Monto" class="form-control" />
                            <ValidationMessage For="@(() => prestamo.Monto)" />
                        </div>

                    </div>
                    <div class="col-6">
                        @*Balance*@
                        <div class="form-group">
                            <label>Balance</label>
                            <InputNumber @bind-Value="prestamo.Balance" class="form-control" />
                            <ValidationMessage For="@(() => prestamo.Balance)" />
                        </div>
                    </div>
                </div>
            </div>
            <h1>
                <span class="text-danger">@mensaje</span>
            </h1>


        </div>
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int PrestamoId { get; set; }
    public int PersonasId { get; set; }



    public List<Personas> listaPersonasId { get; set; } = new List<Personas>();

    public Prestamos prestamo { get; set; } = new Prestamos();
    public Personas persona { get; set; } = new Personas();

    public String mensaje { get; set; } = "";

    public void Nuevo()
    {
        prestamo = new Prestamos();
    }
    bool Validar()
    {
        return prestamo.Concepto.Contains(".");
    }

    protected override void OnInitialized()
    {
        listaPersonasId = PersonasBLL.GetList(p => true);
        if (PrestamoId > 0)
        {
            this.prestamo.PrestamoId = PrestamoId;

            this.Buscar();
        }
    }

    public void Guardar()
    {
        bool guardo;

        if (!Validar())
        {
            mensaje = "Hay errores, por favor corregir.";
            return;
        }

        guardo = PrestamosBLL.Guardar(this.prestamo);

        if (guardo)
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado correctamente"
            });

            Nuevo();

        }
        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No se guardo correctamente."
            });

        }


    }
    private void Buscar()
    {
        if (prestamo.PrestamoId > 0)
        {
            var encontrado = PrestamosBLL.Buscar(prestamo.PrestamoId);

            if (encontrado != null)
                this.prestamo = encontrado;
            else
            {
                ShowNotification(
                new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "No Encontrado..."
                });
            }

        }
    }

    public void Eliminar()
    {
        bool elimino;

        elimino = PrestamosBLL.Eliminar(prestamo);

        if (elimino)
        {
            Nuevo();
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Fue eliminado correctamente."
            });
        }
        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No fue Eliminado, intentar nuevamente."
            });
        }
    }
    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);

    }
}
